
=================== 1.개요 ====================

O2O EditorSystem은 / 종이에 쓴 hand-writing을 인식하여 저장 후 / 편집가능 한 PC File 형태로 바꿔주는 동시에 / Off-line 및 On-line 두 곳 모두에서 / 편집 서비스를 제공하는 / 제품모델을 지향하고 있습니다. 
 
=================== 2.시스템 구성도====================


 저희가 구성한 / 문자를 인식하는 프로그램은 / 스마트폰에서 사용하기에는 프로그램에서 사용하는 / matlab과 tesseract-OCR 같은 부분이 / 복잡하다고 판단하여 / client로 부터 사진을 받아, 이를 처리한 후 / 결과를 사용자에게 전송해 주는 / client - server 구조로 구성 했습니다. 기본적으로 client와 server는 / 소켓을 이용해 통신하며 / server는 client로 부터 받은 이미지의 필기내용을 인식해 / 서비스를 제공하도록 구성했습니다.
 사용자는 / 사진을 찍고 전송하기 편리한 / 스마트폰 어플을 통해 / 이미지를 서버에 전송하고 / 서버는 핸들러를 통해 사용자가 원하는 서비스를 제공합니다. 서비스를 구성하는 데는 / 매트랩, opencv, tesseract-OCR 등을 사용하였습니다. 
 database에는 / client의 개인 정보와 / client의 문자정보가 저장된 traineddata의 개수가 / 저장이 됩니다.

 저희는 저희의 핵심기술인 / 문자인식과정에 대해 중점적으로 설명한 뒤, / 사용자가 쉽게 사용하도록 제공하는 / 안드로이드 어플리케이션 유저인터페이스에 대해 / 설명하고 시연을 하겠습니다.

====================3.전처리====================

 문자를 인식하는 / tesseract - OCR 엔진을 사용하다보면 / 다음과 같이 / 이미지 자체를 인식하지 못하는 경우가 / 존재합니다.

	# 전처리를 해야하는 이유
	# Empty!!!!!!!!
 
 저희는 이렇게 / 글자 자체를 인식하지 못하는 이유가 / 무엇일까 고민하던 도중, / tesseract 게시판 및 논문에서 / 다음과 같은 상황에서 / 인식률이 몹시 떨어진다는 것을 / 알게 되었습니다. 

 다음은 인식률을 떨어뜨리는 / 4가지 경우 입니다. (사진 4장)

	# 글자가 기울어진 경우
	# 티끌이 존재할 경우	
	# 명암이 짙은 경우
	# 짙은 테두리 존재 할 경우
	
 저희는 사용자의 문자에 대한 인식률을 높이기 위해 / 위에 4가지 문제를 해결했습니다.

 1. opencv
 저희는 문자의 기울기를 맞추기 위해 / opencv를 이용해 / 종이 자체의 기울기를 맞춰주는 방식을 / 사용했습니다.

	# 1단계 
	 노이즈 감소 위해 Gaussian blur
	테두리를 찾고 그리기 위해 Canny edge detection 
	# 2단계
	꼭지점의 좌표를 얻기 위해 Find Contour함수 
	사진은 Contour 근사법 적용.
	# 3단계
	opencv의 warpPerspective함수를 이용해 /  원근법을 이용해 경사를 제거.

 2. matlab
 저희는 matlab엔진 api를 이용해 / 종이의 명암과 티끌을 제거했습니다. 

	# 기하학적 접근 및 명암 제거 위해 Binarization
	# 노이즈의 원인이 되는 / 카메라와 종이의 티끌을 제거
	특정 크기 이하의 픽셀 제거하는 방법을 이용
	# 화질을 떨어뜨리는 / 흐릿한 문자의 테두리 부분을 / 부드럽게 만들어 주기 위해 Morphological Opening
	

 =====================4. 문자인식===================

 문자인식의 경우 / 기존의 Tesseract - OCR 엔진을 이용해 / 문자인식을 진행합니다. Tesseract - OCR 엔진은 / 정형화된 문자만을 인식하기 위해 디자인되었기 때문에 / handwriting을 인식하는데 적합하지 않습니다. 저희는 이 tesseract - OCR엔진에 존재하는 / 새로운 폰트를 추가하는 시스템을 이용해 /사용자의 문자정보를 저장한 traineddata를 만든 후 / 이를 추가해 문자를 인식하도록 하였습니다. 이 traineddata는 / 화면상에서는 사용자의 id에 번호를 더한 형태로 만들어져, / 사용자는 사용자에 맞게 / customizing된 문자인식을 / 제공 받을 수 있습니다.

======================5. 후처리==================

 저희는 구글의 tesseract 사이트 게시판으로 부터 / 다음의 글자들에 대한 구분은 / 사실상 불가능하다는 정보를 얻었습니다. 저희는 이 글자들을 구별하기 위해 / 다음과 같은 휴리스틱 알고리즘을 / 이용했습니다. 휴리스틱 알고리즘은 / 경험을 통해 / 정확한 선택을 하지 못하는 경우 / 이를 기존의 설정해 놓은 최선의 선택으로 / 바꿔주는 알고리즘입니다.

	# 다음과 같은 문자들은 대문자 소문자 구분이 어렵습니다.

 저희는 이를 / 대부분의 글자들은 문장의 맨 앞인 경우 / 대문자가 온다는 것을 이용해 / 다음과 같이 문자의 위치가 / 문장의 맨 앞일 경우 대문자, 맨 앞이 아닐 경우 소문자로 / 변경해 주었습니다. 저희가 아직 markdown을 / 적용하지 않았기 때문에 / markdown 적용시 / markdown 문법 내에서도 / 다음과 같은 휴리스틱 알고리즘이 적용되도록 / 바꾸도록 하겠습니다.

======================= Markdown 문서제공==================

 이렇게 작성된 문자정보는 / 다음과 같은 markdown파일로 바꿔줍니다. txt 파일을 markdown파일로 바꾸기 위해서 / pandoc text 변환기를 이용합니다. pandoc 변환기는 / 선택한 파일을 / 원하는 파일형식으로 바꿔주는 변환기입니다. 저희는 이를 이용해 / 사용자에게 markdown 문법이 적용된 파일을 제공합니다. 

===================== 트래인 =====================

  tesseract는 / 저희의 노력으로 / 더 높은 문자인식 환경에서 / 문자를 인식하게 되었습니다. 하지만 tesseract가 알고 있는 글자 정보와 / 우리가 생각하는 글자의 정보는 다르기 때문에 / 우리가 생각하는데로 문자를 인식하지 못합니다. 따라서 저희는 / tesseract가 저희의 생각대로 문자를 인식할 수 있도록 / 저희의 문자정보를 제공해 줘야 합니다.

  저희는 사용자의 문자정보를 제공하는 방법으로 / tesseract에 기존에 존재하는 / 새로운 폰트를 추가하는 시스템을 사용했고 / 이를 이용해 사용자의 문자인식률을 / 높일 수 있었습니다.

 tesseract 자체에서 / 문자 정보가 담긴 traineddata를 생성하는 방법을 / 제공하고 있습니다. 대충 보셔도 아시겠지만 / 방법이 사용자가 직접 사용하기에 / 굉장히 불편하고 / 중간에 다음과 같이 editor를 사용해 / 사용자의 문장정보를 입력해야 합니다.(cow boxer, jtesserBoxEditor)

	# cow boxer, jtesserBoxEditor

 저희는 이러한 불편을 해결하기 위해 / 다음과 같이 설계를 하였습니다. 위에 과정을 분석한 결과 / 사용자가 문자정보를 입력하지 않으면 / 기존에 잘못된 정보가 저장된다는 것을 알게되었습니다. 이는 tesseract가 / .box데이터 생성 시 / 잘못된 문자정보를 저장한다는 것을 알게되었습니다. 그래서 저희는 / 이를 사용자의 의도에 맞는 문자정보로 / 저장해 주도록 만들었습니다.
 기본적으로 사용자에게 / 다음과 같이 / 사용자가 사용할 문자로 이루어진 문장을 제공하고 / 이를 사용자가 작성한 뒤 / 해당 사진을 업로드 하도록 했습니다. 이런 경우 / 사용자의 문장의 뜻을 이미 알고 있고, / 저희는 이 이미지의 box file에 사용자의 문장 정보를 저장해 / 올바른 문자 정보가 담긴 traineddata를 만듭니다. 

======================== 시연 내용 =================
1. 전처리

preprocessing.py

python scan.py -i scan.jpg


2. 문자인식

tesseract train.test.exp0.tif result -l eng

tesseract train.test.exp0.tif result -l eng+train

3. 후처리

postprocessing.py

pandoc text.txt -o text.markdown

4. 트래인

train_transaction.py

tesseract train.test.exp0.tif result -l eng+train

